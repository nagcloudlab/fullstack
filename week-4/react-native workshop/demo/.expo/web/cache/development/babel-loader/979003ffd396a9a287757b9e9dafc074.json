{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nag/Desktop/fullstack/week-4/react-native workshop/demo/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport AuthNavigator from \"./app/navigation/AuthNavigator\";\nimport AppNavigator from \"./app/navigation/AppNavigator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport OfflineNotice from \"./app/components/OfflineNotice\";\nimport AuthContext from \"./app/auth/context\";\nimport authStorage from \"./app/auth/storage\";\nimport AppLoading from 'expo-app-loading';\nimport useNotifications from \"./app/hooks/useNotifications\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isReady = _useState4[0],\n      setIsReady = _useState4[1];\n\n  var restoreUser = function restoreUser() {\n    var user;\n    return _regeneratorRuntime.async(function restoreUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(authStorage.getUser());\n\n          case 2:\n            user = _context.sent;\n            if (user) setUser(user);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isReady) {\n    return React.createElement(AppLoading, {\n      startAsync: restoreUser,\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      onError: console.warn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, React.createElement(OfflineNotice, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, user ? React.createElement(AppNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }) : React.createElement(AuthNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 38\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/nag/Desktop/fullstack/week-4/react-native workshop/demo/App.js"],"names":["StatusBar","React","useEffect","useState","useReducer","AuthNavigator","AppNavigator","NavigationContainer","OfflineNotice","AuthContext","authStorage","AppLoading","useNotifications","App","user","setUser","isReady","setIsReady","restoreUser","getUser","console","warn"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;;;;;;;AAIA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,aAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAOC,gBAAP;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA,kBAIJV,QAAQ,EAJJ;AAAA;AAAA,MAIrBW,IAJqB;AAAA,MAIfC,OAJe;;AAAA,mBAKEZ,QAAQ,CAAC,KAAD,CALV;AAAA;AAAA,MAKrBa,OALqB;AAAA,MAKZC,UALY;;AAO5B,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACCR,WAAW,CAACS,OAAZ,EADD;;AAAA;AACZL,YAAAA,IADY;AAElB,gBAAIA,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAKA,MAAI,CAACE,OAAL,EAAc;AACZ,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEE,WADd;AAEE,MAAA,QAAQ,EAAE;AAAA,eAAMD,UAAU,CAAC,IAAD,CAAhB;AAAA,OAFZ;AAGE,MAAA,OAAO,EAAEG,OAAO,CAACC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACE,0CACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,OAAO,EAAPA;AAAR,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,GAAG,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAsB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,CAFF,CADF,CADF;AAUD","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport { StyleSheet, Text, View, Button, Image, FlatList } from 'react-native';\n\n\nimport AuthNavigator from \"./app/navigation/AuthNavigator\"\nimport AppNavigator from \"./app/navigation/AppNavigator\"\nimport { NavigationContainer } from '@react-navigation/native'\n\nimport OfflineNotice from \"./app/components/OfflineNotice\";\n\nimport AuthContext from \"./app/auth/context\";\nimport authStorage from \"./app/auth/storage\";\nimport AppLoading from 'expo-app-loading';\n\nimport useNotifications from \"./app/hooks/useNotifications\";\n\n\nexport default function App() {\n\n  // useNotifications();\n\n  const [user, setUser] = useState();\n  const [isReady, setIsReady] = useState(false);\n\n  const restoreUser = async () => {\n    const user = await authStorage.getUser();\n    if (user) setUser(user);\n  };\n\n  if (!isReady) {\n    return (\n      <AppLoading\n        startAsync={restoreUser}\n        onFinish={() => setIsReady(true)}\n        onError={console.warn}\n      />\n    )\n  }\n\n  return (\n    <>\n      <AuthContext.Provider value={{ user, setUser }}>\n        <OfflineNotice />\n        <NavigationContainer>\n          {user ? <AppNavigator /> : <AuthNavigator />}\n        </NavigationContainer>\n      </AuthContext.Provider>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}