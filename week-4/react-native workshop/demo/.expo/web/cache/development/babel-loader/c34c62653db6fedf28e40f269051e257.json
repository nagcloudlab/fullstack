{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect } from \"react\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from \"expo-permissions\";\nexport default useNotifications = function useNotifications(notificationListener) {\n  useEffect(function () {\n    registerForPushNotifications();\n    if (notificationListener) Notifications.addListener(notificationListener);\n  }, []);\n\n  var registerForPushNotifications = function registerForPushNotifications() {\n    var permission, token;\n    return _regeneratorRuntime.async(function registerForPushNotifications$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n          case 3:\n            permission = _context.sent;\n\n            if (permission.granted) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 8:\n            token = _context.sent;\n            console.log(token);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Error getting a push token\", _context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/nag/Desktop/fullstack/week-4/react-native workshop/demo/app/hooks/useNotifications.js"],"names":["useEffect","Notifications","Permissions","useNotifications","notificationListener","registerForPushNotifications","addListener","askAsync","NOTIFICATIONS","permission","granted","getExpoPushTokenAsync","token","console","log"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAGA,eAAeC,gBAAgB,GAAG,0BAACC,oBAAD,EAA0B;AAExDJ,EAAAA,SAAS,CAAC,YAAM;AACZK,IAAAA,4BAA4B;AAE5B,QAAID,oBAAJ,EAA0BH,aAAa,CAACK,WAAd,CAA0BF,oBAA1B;AAC7B,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEJH,WAAW,CAACK,QAAZ,CAAqBL,WAAW,CAACM,aAAjC,CAFI;;AAAA;AAEvBC,YAAAA,UAFuB;;AAAA,gBAGxBA,UAAU,CAACC,OAHa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAITT,aAAa,CAACU,qBAAd,EAJS;;AAAA;AAIvBC,YAAAA,KAJuB;AAK7BC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAL6B;AAAA;;AAAA;AAAA;AAAA;AAO7BC,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAP6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;AAUH,CAlBD","sourcesContent":["import { useEffect } from \"react\";\nimport * as Notifications from 'expo-notifications'\nimport * as Permissions from \"expo-permissions\";\n\n\nexport default useNotifications = (notificationListener) => {\n\n    useEffect(() => {\n        registerForPushNotifications();\n\n        if (notificationListener) Notifications.addListener(notificationListener);\n    }, []);\n\n    const registerForPushNotifications = async () => {\n        try {\n            const permission = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n            if (!permission.granted) return;\n            const token = await Notifications.getExpoPushTokenAsync();\n            console.log(token); // unique token , persist this token backend- appln\n        } catch (error) {\n            console.log(\"Error getting a push token\", error);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}