{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nag/Desktop/fullstack/week-4/react-native workshop/demo/app/screens/LoginScreen.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Yup from \"yup\";\nimport Screen from \"../components/Screen\";\nimport { Form, FormField, SubmitButton, ErrorMessage } from \"../components/forms\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\")\n});\n\nfunction LoginScreen(props) {\n  var auth = useAuth();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var email, password, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(authApi.login(email, password));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 6:\n            setLoginFailed(false);\n            auth.logIn(result.data.token);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/logo-red.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), React.createElement(Form, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, React.createElement(ErrorMessage, {\n    error: \"Invalid email and/or password.\",\n    visible: loginFailed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"email\",\n    keyboardType: \"email-address\",\n    name: \"email\",\n    placeholder: \"Email\",\n    textContentType: \"emailAddress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"lock\",\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    textContentType: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    alignSelf: \"center\",\n    marginTop: 50,\n    marginBottom: 20\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/nag/Desktop/fullstack/week-4/react-native workshop/demo/app/screens/LoginScreen.js"],"names":["React","useState","Yup","Screen","Form","FormField","SubmitButton","ErrorMessage","authApi","useAuth","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","props","auth","loginFailed","setLoginFailed","handleSubmit","login","result","ok","logIn","data","token","styles","container","logo","require","StyleSheet","create","padding","width","height","alignSelf","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, Image } from \"react-native\";\nimport * as Yup from \"yup\";\n\nimport Screen from \"../components/Screen\";\nimport { Form, FormField, SubmitButton, ErrorMessage } from \"../components/forms\";\n\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\"),\n});\n\nfunction LoginScreen(props) {\n  const auth = useAuth();\n  const [loginFailed, setLoginFailed] = useState(false);\n\n  const handleSubmit = async ({ email, password }) => {\n    const result = await authApi.login(email, password)\n    if (!result.ok) return setLoginFailed(true)\n    setLoginFailed(false);\n    auth.logIn(result.data.token);\n  }\n\n  return (\n    <Screen style={styles.container}>\n      <Image style={styles.logo} source={require(\"../assets/logo-red.png\")} />\n\n      <Form\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        <ErrorMessage\n          error=\"Invalid email and/or password.\"\n          visible={loginFailed}\n        />\n        <FormField\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          icon=\"email\"\n          keyboardType=\"email-address\"\n          name=\"email\"\n          placeholder=\"Email\"\n          textContentType=\"emailAddress\"\n        />\n        <FormField\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          icon=\"lock\"\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n          textContentType=\"password\"\n        />\n        <SubmitButton title=\"Login\" />\n      </Form>\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    alignSelf: \"center\",\n    marginTop: 50,\n    marginBottom: 20,\n  },\n});\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}